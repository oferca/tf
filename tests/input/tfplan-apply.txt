terraform apply
Acquiring state lock. This may take a few moments...
data.terraform_remote_state.eks: Reading...
data.terraform_remote_state.allianz: Reading...
module.irsa-allianz.module.oidc-provider-data.data.aws_partition.current: Reading...
module.irsa-allianz.module.oidc-provider-data.data.aws_caller_identity.current: Reading...
module.irsa-allianz.module.oidc-provider-data.data.aws_partition.current: Read complete after 0s [id=aws]
module.irsa-allianz.module.oidc-provider-data.data.aws_caller_identity.current: Read complete after 1s [id=829019863018]
data.terraform_remote_state.eks: Read complete after 2s
data.terraform_remote_state.allianz: Read complete after 3s
module.irsa-allianz.data.aws_eks_cluster.eks_cluster: Reading...
module.irsa-allianz.module.irsa["external-dns"].aws_iam_policy.sa_policy[0]: Refreshing state... [id=arn:aws:iam::829019863018:policy/policy-external-dns-allianz-eks]
module.irsa-allianz.module.irsa["external-secrets"].aws_iam_policy.sa_policy[0]: Refreshing state... [id=arn:aws:iam::829019863018:policy/policy-external-secrets-allianz-eks]
module.irsa-allianz.module.irsa["fileservice"].aws_iam_policy.sa_policy[0]: Refreshing state... [id=arn:aws:iam::829019863018:policy/policy-fileservice-allianz-eks]
module.irsa-allianz.module.irsa["external-secrets"].module.irsa[0].module.frigga.random_pet.name: Refreshing state... [id=panther]
module.irsa-allianz.module.irsa["fileservice"].module.irsa[0].module.frigga.random_pet.name: Refreshing state... [id=sunbeam]
module.irsa-allianz.module.irsa["fileservice"].module.irsa[0].module.frigga.random_string.suffix: Refreshing state... [id=qterj]
module.irsa-allianz.module.irsa["external-dns"].module.irsa[0].module.frigga.random_string.suffix: Refreshing state... [id=bemeq]
module.irsa-allianz.module.irsa["external-dns"].module.irsa[0].module.frigga.random_pet.name: Refreshing state... [id=guinea]
module.irsa-allianz.module.irsa["external-secrets"].module.irsa[0].module.frigga.random_string.suffix: Refreshing state... [id=cfgll]
module.irsa-allianz.data.aws_eks_cluster.eks_cluster: Read complete after 1s [id=allianz-eks]
module.irsa-allianz.module.irsa["fileservice"].module.irsa[0].aws_iam_role.irsa: Refreshing state... [id=irsa-qterj]
module.irsa-allianz.module.irsa["external-dns"].module.irsa[0].aws_iam_role.irsa: Refreshing state... [id=irsa-bemeq]
module.irsa-allianz.module.irsa["external-secrets"].module.irsa[0].aws_iam_role.irsa: Refreshing state... [id=irsa-cfgll]
module.irsa-allianz.module.irsa["external-dns"].module.irsa[0].aws_iam_role_policy_attachment.irsa["0"]: Refreshing state... [id=irsa-bemeq-2023020913253557550000000f]
module.irsa-allianz.module.irsa["external-secrets"].module.irsa[0].aws_iam_role_policy_attachment.irsa["0"]: Refreshing state... [id=irsa-cfgll-20230209132535254600000009]
module.irsa-allianz.module.irsa["fileservice"].module.irsa[0].aws_iam_role_policy_attachment.irsa["0"]: Refreshing state... [id=irsa-qterj-2023020913253534840000000b]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following
symbols:
  + create

Terraform will perform the following actions:

  # module.irsa-allianz.module.irsa["external-dns"].kubernetes_service_account.irsa will be created
  + resource "kubernetes_service_account" "irsa" {
      + automount_service_account_token = true
      + default_secret_name             = (known after apply)
      + id                              = (known after apply)

      + metadata {
          + annotations      = {
              + "eks.amazonaws.com/role-arn" = "arn:aws:iam::829019863018:role/irsa-bemeq"
            }
          + generation       = (known after apply)
          + name             = "external-dns"
          + namespace        = "kube-system"
          + resource_version = (known after apply)
          + uid              = (known after apply)
        }
    }

  # module.irsa-allianz.module.irsa["external-secrets"].kubernetes_service_account.irsa will be created
  + resource "kubernetes_service_account" "irsa" {
      + automount_service_account_token = true
      + default_secret_name             = (known after apply)
      + id                              = (known after apply)

      + metadata {
          + annotations      = {
              + "eks.amazonaws.com/role-arn" = "arn:aws:iam::829019863018:role/irsa-cfgll"
            }
          + generation       = (known after apply)
          + name             = "external-secrets"
          + namespace        = "external-secrets"
          + resource_version = (known after apply)
          + uid              = (known after apply)
        }
    }

  # module.irsa-allianz.module.irsa["fileservice"].kubernetes_service_account.irsa will be created
  + resource "kubernetes_service_account" "irsa" {
      + automount_service_account_token = true
      + default_secret_name             = (known after apply)
      + id                              = (known after apply)

      + metadata {
          + annotations      = {
              + "eks.amazonaws.com/role-arn" = "arn:aws:iam::829019863018:role/irsa-qterj"
            }
          + generation       = (known after apply)
          + name             = "fileservice"
          + namespace        = "cynet"
          + resource_version = (known after apply)
          + uid              = (known after apply)
        }
    }

Plan: 3 to add, 0 to change, 0 to destroy.
